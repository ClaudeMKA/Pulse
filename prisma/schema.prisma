// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          Int      @id @default(autoincrement())
  username    String   @unique // ← Corrigé "usermane" en "username"
  email       String   @unique // ← Ajouté @unique
  password    String
  role        Role     @default(ADMIN) // ← Ajouté valeur par défaut
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt // ← Ajouté pour le suivi
  notifications Notifications[]

  @@map("users")
}

model Artists {
  id          Int      @id @default(autoincrement())
  name        String
  desc        String?
  image_path  String?
  events      Events[] // ← Ajouter cette ligne (relation inverse)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("artists")
}

model Events {
  id          Int      @id @default(autoincrement())
  title       String
  desc        String
  start_date  DateTime
  genre       Genre
  type        EventType
  location    String?
  latitude    Float?
  longitude   Float?
  image_path  String?
  artist_id   Int?
  artist      Artists? @relation(fields: [artist_id], references: [id])
  stands      Stands[]

  @@map("events")
}

model ContactMessages {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  subject     String
  message     String
  read        Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("contact_messages")
}

model Stands {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  location    String
  event_id    Int?
  event       Events?  @relation(fields: [event_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("stands")
}

model Notifications {
  id          Int      @id @default(autoincrement())
  title       String
  message     String
  type        NotificationType
  read        Boolean  @default(false)
  user_id     Int
  user        Users    @relation(fields: [user_id], references: [id])
  created_at  DateTime @default(now())

  @@map("notifications")
}

enum Genre {
  RAP
  RNB
  REGGAE
  ROCK
}
enum EventType {
  CONCERT
  FESTIVAL
  SHOWCASE
  OTHER
}
enum Role {
  USER
  ADMIN
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
}

