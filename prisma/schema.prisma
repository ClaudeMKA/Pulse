// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  email       String   @unique
  password    String
  role        Role     @default(USER)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  notifications Notifications[]
  participations EventParticipants[]

  @@map("users")
}

model Artists {
  id          Int      @id @default(autoincrement())
  name        String
  desc        String?
  image_path  String?
  events      Events[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("artists")
}

model Events {
  id          Int      @id @default(autoincrement())
  title       String
  desc        String
  start_date  DateTime
  end_date    DateTime?
  genre       Genre
  type        EventType
  location    String?
  latitude    Float?
  longitude   Float?
  image_path  String?
  price       Float    @default(0)
  currency    String   @default("EUR")
  artist_id   Int?
  artist      Artists? @relation(fields: [artist_id], references: [id])
  stands      Stands[]
  notifications EventNotifications[]
  participants EventParticipants[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  @@map("events")
}

model ContactMessages {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  subject     String
  message     String
  read        Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("contact_messages")
}

model Stands {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  capacity    Int?
  price       Float?
  type        StandType @default(FOOD)
  opened_at   DateTime @default(now())
  closed_at   DateTime @default(now())
  image_path  String?
  location    String?
  event_id    Int?
  event       Events?  @relation(fields: [event_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("stands")
}

enum StandType {
  FOOD
  ACTIVITE
  TATOOS
  SOUVENIRS
  MERCH
}

enum Genre {
  RAP
  RNB
  REGGAE
  ROCK
}

enum EventType {
  CONCERT
  FESTIVAL
  SHOWCASE
  OTHER
}

enum Role {
  USER
  ADMIN
}

model Notifications {
  id          Int      @id @default(autoincrement())
  title       String
  message     String
  type        NotificationType
  read        Boolean  @default(false)
  user_id     Int
  user        Users    @relation(fields: [user_id], references: [id])
  created_at  DateTime @default(now())

  @@map("notifications")
}

model EventNotifications {
  id          Int      @id @default(autoincrement())
  event_id    Int
  event       Events   @relation(fields: [event_id], references: [id], onDelete: Cascade)
  type        ReminderType
  title       String
  message     String
  sent_at     DateTime?
  is_sent     Boolean  @default(false)
  scheduled_for DateTime
  created_at  DateTime @default(now())

  @@map("event_notifications")
}

model EventParticipants {
  id               Int            @id @default(autoincrement())
  user_id          Int
  event_id         Int
  user             Users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  event            Events         @relation(fields: [event_id], references: [id], onDelete: Cascade)
  payment_status   PaymentStatus  @default(PENDING)
  payment_intent_id String?
  amount_paid      Float?
  created_at       DateTime       @default(now())
  
  @@unique([user_id, event_id])
  @@map("event_participants")
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
}

enum ReminderType {
  ONE_HOUR_BEFORE
  TEN_MINUTES_BEFORE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

